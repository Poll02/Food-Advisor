<h1>Info</h1>
<div class="flex-container-info">
    <div class="column">

      <h3>Statistiche Prenotazioni Settimanali</h3>
      <div class="i-section">
        <div class="statistiche">
            <canvas id="graficoSettimana"></canvas>
        </div>
      </div>

      <h3>Gestione Prenotazioni</h3>
      <div class="i-section">
        <% @prenotazioni.each do |prenotazione| %>
  <div class="prenotazione">
    <%= image_tag 'background.jpg' %>    
    <div class="pren-info">
      <p style="font-weight: bold;">Nome Cliente: <span style="font-weight: normal;"><%= prenotazione.user.nome %> <%= prenotazione.user.cognome %></span></p>
      <p style="font-weight: bold;">N. Persone: <span style="font-weight: normal;"><%= prenotazione.numero_persone %></span></p>
      <p style="font-weight: bold;">Data: <span style="font-weight: normal;"><%= prenotazione.data %></span></p>
      <p style="font-weight: bold;">Orario: <span style="font-weight: normal;"><%= prenotazione.orario.strftime("%H:%M") %></span></p>
    </div>
    <div class="pren-icon">
      <i class="fa-solid fa-check"></i>
      <i class="fa-solid fa-ban"></i>
    </div>
  </div>
<% end %>

      </div>
    </div>

    <div class="column">
      <h3>Calendario</h3>
      <div class="i-section" id="calendario">
        
      </div>

      <h3>Prenotazioni Quotidiane</h3>
      <div class="i-section">
        <% if @prenotazioni_oggi.any? %>
  <% @prenotazioni_oggi.each do |prenotazione| %>
    <div class="prenotazione">
      <%= image_tag 'background.jpg' %>    
      <div class="pren-info">
        <p style="font-weight: bold;">Nome Cliente: <span style="font-weight: normal;"><%= prenotazione.user.nome %> <%= prenotazione.user.cognome %></span></p>
        <p style="font-weight: bold;">N. Persone: <span style="font-weight: normal;"><%= prenotazione.numero_persone %></span></p>
        <p style="font-weight: bold;">Data: <span style="font-weight: normal;"><%= prenotazione.data %></span></p>
        <p style="font-weight: bold;">Orario: <span style="font-weight: normal;"><%= prenotazione.orario.strftime("%H:%M") %></span></p>
      </div>
      <div class="pren-icon">
        <i class="fa-solid fa-check"></i>
        <i class="fa-solid fa-ban"></i>
      </div>
    </div>
  <% end %>
<% else %>
  <p>Nessuna prenotazione per oggi.</p>
<% end %>
      </div>
    </div>
  </div>

  <h3>Informazioni sui Dipendenti del Ristorante</h3>
  <div class="employees-section">
    <% if @dipendenti.empty? %>
      <p>Non hai ancora inserito un dipendente.</p>
    <% else %>
      <% @dipendenti.each do |dipendente| %>
        <div class="dipendente">
          <%= image_tag dipendente.foto.present? ? dipendente.foto : 'background.jpg', class: 'dip-foto' %>    
          <div class="dip-info">
            <p><%= dipendente.nome %></p>
            <p><%= dipendente.cognome %></p>
            <p><%= dipendente.ruolo %></p>
          </div>
          <ion-icon name="close-circle-outline" class="del-dipendente-icon" id="del-dipendente-icon" data-dipendente-id="<%= dipendente.id %>" style="font-size: 25px; cursor: pointer;"></ion-icon>
        </div>
      <% end %>
    <% end %>
  </div>
  <button type="button" id="add-dipendente-btn">Aggiungi Dipendente</button>
  
  <!-- Modale per aggiungere dipendente -->
  <div id="dipendenteModal" class="modal">
    <div class="modal-content">
      <span class="close" id="close-dipendente-modal">&times;</span>
      <h2>Aggiungi Dipendente</h2>
      <%= form_with(url: create_dipendente_info_path, method: :post, local: true) do |form| %>
        <div class="form-group">
          <%= form.label :nome, "Nome" %>
          <%= form.text_field :nome, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= form.label :cognome, "Cognome" %>
          <%= form.text_field :cognome, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= form.label :ruolo, "Ruolo" %>
          <%= form.text_field :ruolo, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= form.label :assunzione, "Data di Assunzione" %>
          <%= form.date_field :assunzione, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= form.label :foto, "Foto URL" %>
          <%= form.text_field :foto, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= form.submit "Salva Dipendente", class: "btn btn-primary" %>
          <button type="button" id="resetBtnDipendente">Azzera</button>
        </div>
      <% end %>
    </div>
  </div> 
  <!-- Finestra di conferma eliminazione ricetta -->
  <div id="confirmModalDipendente" class="modal">s
    <div class="modal-content">
      <span class="close-confirm-dipendente">&times;</span>
      <h2>Conferma Eliminazione</h2>
      <p>Sei sicuro di voler eliminare questo evento?</p>
      <button id="confirmDeleteBtnDipendente">Conferma</button>
      <button id="cancelDeleteBtnDipendente">Annulla</button>
    </div>
  </div>



  <script>
// JS PER IL GRAFICO
document.addEventListener('DOMContentLoaded', function() {
  var ctx = document.getElementById('graficoSettimana').getContext('2d');
  var graficoSettimana = new Chart(ctx, {
    type: 'line', // Tipo di grafico: linea
    data: {
      labels: ['Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato', 'Domenica'], // Giorni della settimana
      datasets: [{
        label: 'Numero di Prenotazioni',
        data: [12, 19, 3, 5, 2, 3, 7], // Dati delle ordinate
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
});

// JS PER IL CALENDARIO
document.addEventListener('DOMContentLoaded', function() {
  const calendario = document.getElementById('calendario');

  const monthNames = [
    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
  ];

  const weekdayNames = ['Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'];

  const now = new Date();
  const currentMonth = now.getMonth();
  const currentYear = now.getFullYear();

  function createCalendar(month, year) {
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    let calendarHTML = '';

    // Mese corrente
    calendarHTML += `<div class="month">${monthNames[month]} ${year}</div>`;

    // Giorni della settimana
    calendarHTML += '<div class="weekdays">';
    weekdayNames.forEach(day => {
      calendarHTML += `<div class="weekday">${day}</div>`;
    });
    calendarHTML += '</div>';

    // Giorni del mese
    calendarHTML += '<div class="days">';
    // Aggiungi celle vuote fino al primo giorno del mese
    for (let i = 0; i < firstDay - 1; i++) {
      calendarHTML += '<div class="day empty"></div>';
    }

    // Aggiungi giorni del mese
    for (let day = 1; day <= daysInMonth; day++) {
      calendarHTML += `<div class="day">${day}</div>`;
    }
    calendarHTML += '</div>';

    return calendarHTML;
  }

  calendario.innerHTML = createCalendar(currentMonth, currentYear);
});


  // JS per aprire la finestra dei dipendenti
  document.addEventListener("DOMContentLoaded", function() {
    var modal2 = document.getElementById("dipendenteModal");
    var btn = document.getElementById("add-dipendente-btn");
    var span = document.getElementById("close-dipendente-modal");
    var resetBtn = document.getElementById("resetBtnDipendente");

    btn.onclick = function() {
      modal2.style.display = "block";
    }

    span.onclick = function() {
      modal2.style.display = "none";
    }

    window.onclick = function(event) {
      if (event.target == modal2) {
        modal2.style.display = "none";
      }
    }

    resetBtn.onclick = function() {
      var form = modal2.querySelector("form");
      form.reset();
    }
  });

  // JS per eliminazione dipendenti
  var confirmPromoModal = document.getElementById("confirmModalDipendente");
  var closePromoConfirmBtn = document.getElementsByClassName("close-confirm-dipendente")[0];
  var confirmPromoDeleteBtn = document.getElementById("confirmDeleteBtnDipendente");
  var cancelPromoDeleteBtn = document.getElementById("cancelDeleteBtnDipendente");
  var promoIdToDelete = null;

  document.querySelectorAll('.del-dipendente-icon').forEach(function(deletePromoIcon) {
    deletePromoIcon.onclick = function() {
      promoIdToDelete = this.getAttribute('data-dipendente-id');
      console.log("Dip ID to delete:", promoIdToDelete); // Log per verificare ID della promozione da eliminare
      confirmPromoModal.style.display = "block";
    }
  });

  closePromoConfirmBtn.onclick = function() {
    console.log("Close button clicked");
    confirmPromoModal.style.display = "none";
  }

  cancelPromoDeleteBtn.onclick = function() {
    console.log("Cancel delete button clicked");
    confirmPromoModal.style.display = "none";
    promoIdToDelete = null;
  }

  window.onclick = function(event) {
    if (event.target == confirmPromoModal) {
      console.log("Clicked outside modal");
      confirmPromoModal.style.display = "none";
      promoIdToDelete = null;
    }
  }

  confirmPromoDeleteBtn.onclick = function() {
    console.log("Confirm delete dipendente button clicked");
    if (promoIdToDelete) {
      fetch(`/info/destroy_dipendente/${promoIdToDelete}`, {
        method: 'DELETE',
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
          'Content-Type': 'application/json'
        }
      }).then(response => response.json())
        .then(data => {
          console.log("Response from server:", data); // Log per verificare la risposta dal server
          if (data.success) {
            console.log("Dipendente deleted successfully");
            document.getElementById(`dipendente-${promoIdToDelete}`).remove();
            confirmPromoModal.style.display = "none";
          } else {
            console.error('Errore durante l\'eliminazione della promozione data: ' + data.error);
            alert('Errore durante l\'eliminazione della promozione data: ' + data.error);
          }
        }).catch(error => {
          console.error('Errore durante l\'eliminazione della promozione errore: ' + error.message);
          alert('Errore durante l\'eliminazione del dipendente errore: ' + error.message);
        });
    } else {
      console.error("Dip ID to delete is null or undefined");
      alert("Errore: ID dipendente da eliminare non valido.");
    }
  }


</script>

