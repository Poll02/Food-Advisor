<div class="pagina-info">
  <% if flash[:notice] %>
      <div class="alert alert-success" role="alert">
        <%= flash[:notice] %>
      </div>
    <% end %>

    <% if flash[:alert] %>
      <div class="alert alert-danger" role="alert">
        <%= flash[:alert] %>
      </div>
    <% end %>
<div class="flex-container-info">
    <div class="column">

      <h3>Statistiche Prenotazioni Settimanali</h3>
      <div class="i-section">
        <div class="statistiche">
            <canvas id="graficoSettimana"></canvas>
        </div>
      </div>

      <h3>Gestione Prenotazioni</h3>
      <div class="i-section">
        <% @prenotazioni.each do |prenotazione| %>
          <div class="prenotazione">
            <%= image_tag 'background.jpg' %>    
            <div class="pren-info">
              <p style="font-weight: bold;">Nome Cliente: <span style="font-weight: normal;"><%= prenotazione.user.nome %> <%= prenotazione.user.cognome %></span></p>
              <p style="font-weight: bold;">N. Persone: <span style="font-weight: normal;"><%= prenotazione.numero_persone %></span></p>
              <p style="font-weight: bold;">Data: <span style="font-weight: normal;"><%= prenotazione.data %></span></p>
              <p style="font-weight: bold;">Orario: <span style="font-weight: normal;"><%= prenotazione.orario.strftime("%H:%M") %></span></p>
            </div>
            <div class="pren-icon">
              <!-- Icona fa-check -->
              <i class="fa-solid fa-check check-icon" data-prenotazione-id="<%= prenotazione.id %>"></i>
        
              <!-- Icona fa-ban -->
              <i class="fa-solid fa-ban delete-icon" data-prenotazione-id="<%= prenotazione.id %>"></i>
            </div>
          </div>
        <% end %>

      </div>
    </div>

    <div class="column">
      <h3>Calendario</h3>
      <div class="i-section" id="calendario">
             
      </div>

      <h3>Impegni Quotidiani</h3>
      <p>in giallo sono riportate le prenotazioni validate mentre in verde sono riportati gli eventi</p>
      <div class="i-section" id="impegniGiornalieri">
        
      </div>
    </div>
  </div>

  <h3>Informazioni sui Dipendenti del Ristorante</h3>
  <div class="employees-section">
    <% if @dipendenti.empty? %>
      <p style="color: gray; ">Non hai ancora inserito un dipendente.</p>
    <% else %>
      <% @dipendenti.each do |dipendente| %>
        <div class="dipendente">
          <%= image_tag dipendente.foto.present? ? dipendente.foto : 'background.jpg', class: 'dip-foto' %>    
          <div class="dip-info">
            <p>Nome: <%= dipendente.nome %></p>
            <p>Cognome: <%= dipendente.cognome %></p>
            <p>Ruolo: <%= dipendente.ruolo %></p>
            <p>Assunzione: <%= dipendente.assunzione.strftime("%d/%m/%Y") %></p>
          </div>
          <button class="btn btn-danger remove-dipendente" data-dip-id="<%= dipendente.id %>">Elimina</button>
        </div>
      <% end %>
    <% end %>
  </div>
  <div class="formDipendente">
    <h2>Aggiungi Dipendente</h2>
    <%= form_with(model: @dipendente, url: create_dipendente_path, local: true) do |form| %>
      <%= form.fields_for :dipendente do |dipendente_form| %>
        <div class="form-group">
          <%= dipendente_form.label :foto, "Foto URL" %>
          <%= dipendente_form.file_field :foto, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= dipendente_form.label :nome, "Nome" %>
          <%= dipendente_form.text_field :nome, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= dipendente_form.label :cognome, "Cognome" %>
          <%= dipendente_form.text_field :cognome, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= dipendente_form.label :ruolo, "Ruolo" %>
          <%= dipendente_form.select :ruolo, options_for_select(['fattorino', 'cameriere', 'cassiere', 'sommelier', 'cuoco', 'lavapiatti', 'direttore di sala', 'aiuto-chef']), {}, class: "form-control" %>
        </div>
        <div class="form-group">
          <%= dipendente_form.label :assunzione, "Data di Assunzione" %>
          <%= dipendente_form.date_field :assunzione, class: "form-control" %>
        </div>
        <%= dipendente_form.hidden_field :ristoratore_id, value: @current_user.cliente.ristoratore.id %> 
      <% end %>
      <div class="form-group">
        <%= form.submit "Salva Dipendente", class: "btn btn-primary" %>
        <button type="button" id="resetBtnDipendente">Azzera</button>
      </div>
    <% end %>
  </div>

  <script>
// JS PER IL GRAFICO
document.addEventListener('DOMContentLoaded', function() {
  // Ottieni la data corrente
  var currentDate = new Date();

  // Calcola il lunedÃ¬ della settimana corrente
  var currentDay = currentDate.getDay();
  var distanceToMonday = currentDay === 0 ? 6 : currentDay - 1;
  var mondayDate = new Date(currentDate);
  mondayDate.setDate(currentDate.getDate() - distanceToMonday);

  // Converte la data in stringa 'YYYY-MM-DD'
  var startDate = mondayDate.toISOString().split('T')[0];

  fetch(`/bookings_per_week?start_date=${startDate}`)
    .then(response => response.json())
    .then(data => {
      // Definisci i giorni della settimana e inizializza i dati a zero
      const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
      const orderedBookingData = daysOfWeek.map(day => {
        const date = new Date(startDate);
        date.setDate(date.getDate() + daysOfWeek.indexOf(day));
        const dateString = date.toISOString().split('T')[0];
        return data.bookings[dateString] || 0;
      });

      const orderedReviewData = daysOfWeek.map(day => {
        const date = new Date(startDate);
        date.setDate(date.getDate() + daysOfWeek.indexOf(day));
        const dateString = date.toISOString().split('T')[0];
        return data.reviews[dateString] || 0;
      });

      var ctx = document.getElementById('graficoSettimana').getContext('2d');
      var graficoSettimana = new Chart(ctx, {
        type: 'line',
        data: {
          labels: daysOfWeek,
          datasets: [{
            label: 'Numero di Prenotazioni',
            data: orderedBookingData,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
          }, {
            label: 'Numero di Recensioni',
            data: orderedReviewData,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function(value) {
                  if (Number.isInteger(value)) {
                    return value;
                  }
                },
                stepSize: 1
              }
            }
          }
        }
      });
    });
});


// JS PER IL CALENDARIO
document.addEventListener('DOMContentLoaded', function() {
  const calendario = document.getElementById('calendario');

  const monthNames = [
    'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno',
    'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'
  ];

  const weekdayNames = ['Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'];

  let currentMonth = (new Date()).getMonth();
  let currentYear = (new Date()).getFullYear();
  let currentDay = (new Date()).getDate();

  // Funzione per creare il calendario
  function createCalendar(month, year) {
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    let calendarHTML = '';

    // Mese corrente
    calendarHTML += `<div class="month">${monthNames[month]} ${year}</div>`;

    // Giorni della settimana
    calendarHTML += '<div class="weekdays">';
    weekdayNames.forEach(day => {
      calendarHTML += `<div class="weekday">${day}</div>`;
    });
    calendarHTML += '</div>';

    // Giorni del mese
    calendarHTML += '<div class="days">';
    // Aggiungi celle vuote fino al primo giorno del mese
    for (let i = 0; i < firstDay; i++) {
      calendarHTML += '<div class="day empty"></div>';
    }

    // Aggiungi giorni del mese
    for (let day = 1; day <= daysInMonth; day++) {
      calendarHTML += `<div class="day" style="cursor: pointer; " onclick="loadDailyData(${day})">${day}</div>`;
    }
    calendarHTML += '</div>';

    calendario.innerHTML = calendarHTML;
  }

  // Funzione per caricare i dati giornalieri al clic su un giorno
  window.loadDailyData = function(day) {
    fetch(`/daily_bookings_and_events?year=${currentYear}&month=${currentMonth + 1}&day=${day}`)
      .then(response => response.json())
      .then(data => {
        // Logica per gestire i dati giornalieri (prenotazioni, eventi)
        console.log('Dati giornalieri:', data);

        // Esempio di visualizzazione dei dati nell interfaccia utente
        const impegniGiornalieri = document.getElementById('impegniGiornalieri');
        impegniGiornalieri.innerHTML = '';

        if (data.prenotazioni.length > 0 || data.eventi.length > 0) {
          if (data.prenotazioni.length > 0) {
            const prenotazioniSection = document.createElement('div');
            prenotazioniSection.classList.add('section');
            prenotazioniSection.innerHTML = '';
            data.prenotazioni.forEach(prenotazione => {
              const prenotazioneElement = document.createElement('div');
              prenotazioneElement.classList.add('prenotazionetavolo');
              prenotazioneElement.innerHTML = `
                <div style="font-size: 13px; background-color: #ffd166; padding: 1%; border-radius: 10px; ">
                  <p> ID cliente: ${prenotazione.user_id}</p>
                  <p> N persone: ${prenotazione.numero_persone}</p>
                  <p> Orario: ${prenotazione.orario}</p>
                </div>
              `;
              prenotazioniSection.appendChild(prenotazioneElement);
            });
            impegniGiornalieri.appendChild(prenotazioniSection);
          }

          if (data.eventi.length > 0) {
            const eventiSection = document.createElement('div');
            eventiSection.classList.add('section');
            eventiSection.innerHTML = '';
            data.eventi.forEach(evento => {
              const eventoElement = document.createElement('div');
              eventoElement.classList.add('evento');
              eventoElement.innerHTML = `
                <div style="font-size: 13px; background-color: #dde5b6; padding: 1%; border-radius: 10px; ">
                  <p> Nome: ${evento.nome}</p>
                  <p> Luogo: ${evento.luogo}</p>
                  <p> Descrizione: ${evento.descrizione}</p>
                </div>
              `;
              eventiSection.appendChild(eventoElement);
            });
            impegniGiornalieri.appendChild(eventiSection);
          }
        } else {
          impegniGiornalieri.innerHTML = '<p>Nessun impegno per questo giorno.</p>';
        }
      })
      .catch(error => console.error('Errore nel caricamento dei dati giornalieri:', error));
  };

  // Inizializza il calendario per il mese corrente
  createCalendar(currentMonth, currentYear);

  // Simula un clic sul giorno corrente
  window.loadDailyData(currentDay);
});

  // JS per la validazione delle prenotazioni
  document.addEventListener('DOMContentLoaded', function() {
    const checkIcons = document.querySelectorAll('.check-icon');
    const deleteIcons = document.querySelectorAll('.delete-icon');

    checkIcons.forEach(icon => {
      icon.addEventListener('mouseenter', function() {
        this.style.color = 'green';
      });

      icon.addEventListener('mouseleave', function() {
        this.style.color = '';
      });

      icon.addEventListener('click', function() {
        const prenotazioneId = this.getAttribute('data-prenotazione-id');
        setPrenotazioneValida(prenotazioneId);
      });
    });

    deleteIcons.forEach(icon => {
      icon.addEventListener('mouseenter', function() {
        this.style.color = 'red';
      });

      icon.addEventListener('mouseleave', function() {
        this.style.color = '';
      });

      icon.addEventListener('click', function() {
        const prenotazioneId = this.getAttribute('data-prenotazione-id');
        deletePrenotazione(prenotazioneId);
      });
    });

    function setPrenotazioneValida(prenotazioneId) {
      const authenticityToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      // Esegui una richiesta Ajax per impostare la prenotazione come valida
      fetch(`/prenotazione/${prenotazioneId}/set_valida`, {
        method: 'PATCH',  // Puoi usare 'PUT' se preferisci
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': authenticityToken
        },
        body: JSON.stringify({ valida: true })
      })
      .then(response => {
        if (response.ok) {
          // Aggiorna l'interfaccia o ricarica la pagina come necessario
          location.reload();  // Esempio: Ricarica la pagina
        } else {
          console.error('Errore durante l\'impostazione della prenotazione come valida');
        }
      })
      .catch(error => {
        console.error('Errore durante la richiesta Ajax:', error);
      });
    }

    function deletePrenotazione(prenotazioneId) {
      const authenticityToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      // Esegui una richiesta Ajax per eliminare la prenotazione
      fetch(`/prenotazione/${prenotazioneId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': authenticityToken
        }
      })
      .then(response => {
        if (response.ok) {
          // Aggiorna l'interfaccia o ricarica la pagina come necessario
          location.reload();  // Esempio: Ricarica la pagina
        } else {
          console.error('Errore durante l\'eliminazione della prenotazione');
        }
      })
      .catch(error => {
        console.error('Errore durante la richiesta Ajax:', error);
      });
    }
  });

  // per i dipendenti
  document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.remove-dipendente').forEach(function(button) {
    button.addEventListener('click', function() {
      var dipendenteId = this.getAttribute('data-dip-id');
      if (confirm('Sei sicuro di voler eliminare questo dipendente?')) {
        fetch('/info/destroy_dipendente/' + dipendenteId, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            alert('Dipendente eliminato con successo.');
            document.getElementById('dipendente-' + dipendenteId).remove();
          } else {
            alert('Errore: ' + data.error);
          }
        });
      }
    });
  });
});

</script>
